#summary upgrade workspace for 3.0-rc.2

This workspace script is more up-to-date than the [UpgradeSs3ToRc2  upgrade script].

Segments of the script:
 * fetch phase
  * fetch all configurations directly referenced in script
  * upgrade Metacello
  * fetch GLASS packages
  * fetch Seaside30 packages
  * fetch tODE packages
  * fetch SqueakSource3 packages
  * *COMMIT*
 * load phase
  * load GLASS
  * load Seaside30
  * load tODE
  * load SqueakSource3
  * *COMMIT*
 * migration analysis
 * migration phase
  * migrate instances (Issue 37) and replace instances (Issue 39)
  * *COMMIT*
 * clean up phase
  * clean up
   * remove continuations from object log ... or wipe out continuation
   * [http://code.google.com/p/glassdb/wiki/ClearPersistentCaches clear persistent caches]
   * nuke [http://ss3.gemstone.com/ss/ss3.html ss3], [http://ss3.gemstone.com/ss/pharo.html pharo], [http://ss3.gemstone.com/ss/grease.html Grease], [http://ss3.gemstone.com/ss/distroPharo1.html Distro for Pharo 1], [http://ss3.gemstone.com/ss/stash.html stash], [http://ss3.gemstone.com/ss/stash2.html stash2] projects as they were added for alpha testing
  * *COMMIT*
===Instance Migration===
It is desirable to do the upgrade in one transaction, but allInstances requires a commit...that means we have to:
 # do the allinstances and commit before doing the upgrade/migrate/replace instances or,
 # do the upgrade, commit, then do the migrate and replace instances step
 # shutdown the site while the upgrade is in progress.
====Option 1====
If we take option 1, we risk missing some instances that get created while we are doing the upgrade and having to run the allInstances yet again
====Option 2====
With option 2 allows us to catch all of the instances after the upgrade (see discussion on [http://forum.world.st/instances-of-old-class-versions-td4100977.html Instances of old class versions]), but that implies that the code that we upgrade to must be durable enough to run before the migration/replace instances step.

In fact to correctly survive either option 1 or option 2 the code has to be durable enough to run without migration/replace instances...
====Option 3====
If we shutdown the site, we can go back and use bulk migrate.
====Current Choice====
Since I'd like to use SqueakSource3 as an exemplar site for GLASS, it makes sense to attempt the live update option and then encode the live update steps into GsDeployer, so that the scripts can be simplified ...
At this point in time Option 2 appears to be the best bet.

===workspace===
{{{
| versionString deployBlock classesWithClassHistory changedClassNames |
"fetch phase"
versionString := '1.0-beta.8.7.1'.
GsDeployer cleanClassHistory.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(MCWorkingCopy allManagers detect: [:each | each packageName = 'ConfigurationOfSeaside30'])
        repositoryGroup addRepository: (MCHttpRepository 
                location: 'http://ss3.gemstone.com/ss/tODE'
                user: ''
                password: '').
{ConfigurationOfGLASS. ConfigurationOfMetacello. ConfigurationOftODE. ConfigurationOfSeaside30. ConfigurationOfSqueakSource. } do: [:config | 
	config project updateProject ].
ConfigurationOfMetacello project currentVersion versionNumber < '1.0-beta.31.1' asMetacelloVersionNumber
    ifTrue: [
        (Gofer new)
            gemsource: 'metacello';
            version: 'Gofer-Core.gemstone-dkh.135';
            version: 'Metacello-Base-DaleHenrichs.19';
            version: 'Metacello-Core-dkh.468';
            version: 'Metacello-MC-dkh.531';
            version: 'Metacello-Platform.gemstone-dkh.23';
            load].
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfGLASS project version: versionString) fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfSeaside30 project version: '3.0.6.3') 
                fetch: #('Base' 'JQuery-UI' 'Seaside-Adaptors-Swazoo' ).
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOftODE project version: '0.1') fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfSqueakSource project version: '3.0-rc.1') fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
"load phase"
deployBlock := [:aBlock |       | oldAutoCommit oldAutoMigrate |
        oldAutoCommit := MCPlatformSupport autoCommit.
        oldAutoMigrate := MCPlatformSupport autoMigrate.
        MCPlatformSupport autoCommit: false.
        MCPlatformSupport autoMigrate: false.
        [aBlock 
                on: (Smalltalk at: #MetacelloSkipDirtyPackageLoad), Warning
                do: [:ex | 
                        (ex isKindOf: Warning)
                                ifTrue: [ 
                                        Transcript cr; show: ex description.
                                        ex resume ]
                                ifFalse: [ ex resume: false ]]]
                ensure: [
                        MCPlatformSupport autoCommit: oldAutoCommit.
                        MCPlatformSupport autoMigrate: oldAutoMigrate].
        System commitTransaction ifFalse: [ nil error: 'commit failed' ]].
deployBlock 
        value: [ 
                (ConfigurationOfGLASS project version: versionString) load: #( 'Core' 'Monticello' ).
                (ConfigurationOfGLASS project version: versionString) load ].
deployBlock 
        value: [
        	(ConfigurationOfSeaside30 project version: '3.0.6.3') 
                load: #('Base' 'JQuery-UI' 'Seaside-Adaptors-Swazoo' ).
].
deployBlock 
        value: [ (ConfigurationOftODE project version: '0.1') load ].
deployBlock 
        value: [ (ConfigurationOfSqueakSource project version: '3.0-rc.1') load ].
"migration analysis"
classesWithClassHistory := GsDeployer new classesWithClassHistory.
changedClassNames := (classesWithClassHistory collect: [:cl | cl name ]) asSet.
"migration phase"
"clean up phase"
}}}