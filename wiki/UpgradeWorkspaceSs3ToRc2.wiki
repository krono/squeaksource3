#summary upgrade workspace for 3.0-rc.2

This workspace script is more up-to-date than the [UpgradeSs3ToRc2  upgrade script].

Segments of the script:
 * fetch phase
  * fetch all configurations directly referenced in script
  * upgrade Metacello
  * fetch GLASS packages
  * fetch Seaside30 packages
  * fetch tODE packages
  * fetch SqueakSource3 packages
  * *COMMIT*
 * load phase
  * load GLASS
  * load Seaside30
  * load tODE
  * load SqueakSource3
  * patch instances of SSUrlFilter (Issue 47), by traversing dispatcher tree
  * *COMMIT*
 * migration analysis
 * migration phase
  * migrate instances (Issue 37) and replace instances (Issue 39)
  * *COMMIT*
 * clean up phase
  * clean up
   * remove continuations from object log ... or wipe out continuation
   * looks like the instances for all subclasses of SSModel may have a #stringsSatisfyBlocks entry in the property dictionary that is no longer valid
   * [http://code.google.com/p/glassdb/wiki/ClearPersistentCaches clear persistent caches]
   * nuke [http://ss3.gemstone.com/ss/ss3.html ss3], [http://ss3.gemstone.com/ss/pharo.html pharo], [http://ss3.gemstone.com/ss/grease.html Grease], [http://ss3.gemstone.com/ss/distroPharo1.html Distro for Pharo 1], [http://ss3.gemstone.com/ss/stash.html stash], [http://ss3.gemstone.com/ss/stash2.html stash2] projects as they were added for alpha testing
  * *COMMIT*
===Instance Migration===
It is desirable to do the upgrade in one transaction, but allInstances requires a commit...that means we have to:
 # do the allinstances and commit before doing the upgrade/migrate/replace instances or,
 # do the upgrade, commit, then do the migrate and replace instances step
 # shutdown the site while the upgrade is in progress.
====Option 1====
If we take option 1, we risk missing some instances that get created while we are doing the upgrade and having to run the allInstances yet again
====Option 2====
With option 2 allows us to catch all of the instances after the upgrade (see discussion on [http://forum.world.st/instances-of-old-class-versions-td4100977.html Instances of old class versions]), but that implies that the code that we upgrade to must be durable enough to run before the migration/replace instances step.

In fact to correctly survive either option 1 or option 2 the code has to be durable enough to run without migration/replace instances...
====Option 3====
If we shutdown the site, we can go back and use bulk migrate.
====Current Choice====
Since I'd like to use SqueakSource3 as an exemplar site for GLASS, it makes sense to attempt the live update option and then encode the live update steps into GsDeployer, so that the scripts can be simplified ...
At this point in time Option 2 appears to be the best bet.

===workspace===
{{{
| versionString deployBlock classesWithClassHistory changedClassNames migrationClassNames 
 migrationClasses instanceLists symbolList instanceCount array migrationDoBlock |
"fetch phase"
versionString := '1.0-beta.8.7.1'.
GsDeployer cleanClassHistory.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(MCWorkingCopy allManagers detect: [:each | each packageName = 'ConfigurationOfSeaside30'])
        repositoryGroup addRepository: (MCHttpRepository 
                location: 'http://ss3.gemstone.com/ss/tODE'
                user: ''
                password: '').
{ConfigurationOfGLASS. ConfigurationOfMetacello. ConfigurationOftODE. ConfigurationOfSeaside30. ConfigurationOfSqueakSource. } do: [:config | 
	config project updateProject ].
ConfigurationOfMetacello project currentVersion versionNumber < '1.0-beta.31.1' asMetacelloVersionNumber
    ifTrue: [
        (Gofer new)
            gemsource: 'metacello';
            version: 'Gofer-Core.gemstone-dkh.135';
            version: 'Metacello-Base-DaleHenrichs.19';
            version: 'Metacello-Core-dkh.468';
            version: 'Metacello-MC-dkh.531';
            version: 'Metacello-Platform.gemstone-dkh.23';
            load].
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfGLASS project version: versionString) fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfSeaside30 project version: '3.0.6.3') 
                fetch: #('Base' 'JQuery-UI' 'Seaside-Adaptors-Swazoo' ).
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOftODE project version: '0.1') fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
(ConfigurationOfSqueakSource project version: '3.0-rc.1') fetch.
System commitTransaction ifFalse: [ nil error: 'commit failed'].
"load phase"
deployBlock := [:aBlock |       | oldAutoCommit oldAutoMigrate |
        oldAutoCommit := MCPlatformSupport autoCommit.
        oldAutoMigrate := MCPlatformSupport autoMigrate.
        MCPlatformSupport autoCommit: false.
        MCPlatformSupport autoMigrate: false.
        [aBlock 
                on: (Smalltalk at: #MetacelloSkipDirtyPackageLoad), Warning
                do: [:ex | 
                        (ex isKindOf: Warning)
                                ifTrue: [ 
                                        Transcript cr; show: ex description.
                                        ex resume ]
                                ifFalse: [ ex resume: false ]]]
                ensure: [
                        MCPlatformSupport autoCommit: oldAutoCommit.
                        MCPlatformSupport autoMigrate: oldAutoMigrate].
        System commitTransaction ifFalse: [ nil error: 'commit failed' ]].
deployBlock 
        value: [ 
                (ConfigurationOfGLASS project version: versionString) load: #( 'Core' 'Monticello' ).
                (ConfigurationOfGLASS project version: versionString) load ].
deployBlock 
        value: [
        	(ConfigurationOfSeaside30 project version: '3.0.6.3') 
                load: #('Base' 'JQuery-UI' 'Seaside-Adaptors-Swazoo' ).
].
deployBlock 
        value: [ (ConfigurationOftODE project version: '0.1') load ].
deployBlock 
        value: [
		 "http://code.google.com/p/squeaksource3/wiki/ChangedClassesSs3ToRc2#SSCondition_migration"
		MADescriptionBuilder unload.
		(ConfigurationOfSqueakSource project version: '3.0-rc.1') load.
		"http://code.google.com/p/squeaksource3/issues/detail?id=47"
		((WADispatcher default handlerAt: 'ss') filters select: [:filter | filter isKindOf: SSUrlFilter]) do: [:filter | filter instVarNamed: #routes put: nil ].  ].
"migration analysis"
classesWithClassHistory := GsDeployer new classesWithClassHistory.
classesWithClassHistory size = 55 ifFalse: [ nil error: 'incorrect number of class with class history' ].
changedClassNames := (classesWithClassHistory collect: [:cl | cl name ]) asSet.
changedClassNames size = 37 ifFalse: [ nil error: 'incorrect number of changed classes' ].
"migration analysis"
classesWithClassHistory := GsDeployer new classesWithClassHistory.
classesWithClassHistory size = 55 ifFalse: [ nil error: 'incorrect number of class with class history' ].
changedClassNames := (classesWithClassHistory collect: [:cl | cl name ]) asSet.
changedClassNames size = 37 ifFalse: [ nil error: 'incorrect number of changed classes' ].
"migration phase"
symbolList := System myUserProfile symbolList.
[
	System commitTransaction ifFalse: [ nil error: 'commit failed' ].
	(symbolList objectNamed: #UserGlobals) 
		at: #'SS3_MIGRATE_INSTANCE_LISTS' 
		put: (instanceList := SystemRepository listInstances: classesWithClassHistory).
	System commitTransaction ifFalse: [ nil error: 'commit failed' ].
	"instances analysis"
	instanceList size = 55
		ifFalse: [ nil error: 'incorrect number of classes with instances' ].
	1 to: classesWithClassHistory size do: [:index | | classVersion class history |
		(instanceList at: index) size > 0
			ifTrue: [ 
				classVersion := classesWithClassHistory at: index.
				class := symbolList objectNamed: classVersion name. 
				history := class classHistory.
				(classVersion == history first or: [ classVersion == history last]) 
					ifFalse: [ nil error: 'instances of intermediate class versions' ]]].
	"#instVarMappingTo: for description migrations"
	SSMember class compile:  'instVarMappingTo: anotherClass 
	"The receiver is the class being migrated to and <anotherClass> is the class being migrated from"
	"For the upgrade of SS3 to SqueakSource3.0-rc.2, the class histories were cleared at the beginning, so 
	 we can safely assume that `self classHistory first` is the version of the class present before the upgrade
	 started. We assume that there are no instances of classes _between_ the first and last class bersion, because
	 there were no commits when the intermediate class versions."

	anotherClass ~~ self classHistory first ifTrue: [  ^super instVarMappingTo: anotherClass ].
	"slot 5 is currently description and has been renamed to information"
	(((self allInstVarNames at: 8) = #''information'') and: [
		(anotherClass allInstVarNames at: 8) = #''description''])
			ifFalse: [ self error: ''incorrect migration instance variable mapping''].
	^#( 1 2 3 4 5 6 7 8 9)'.
	SSProject class compile:  'instVarMappingTo: anotherClass 
	"The receiver is the class being migrated to and <anotherClass> is the class being migrated from"
	"For the upgrade of SS3 to SqueakSource3.0-rc.2, the class histories were cleared at the beginning, so 
	 we can safely assume that `self classHistory first` is the version of the class present before the upgrade
	 started. We assume that there are no instances of classes _between_ the first and last class bersion, because
	 there were no commits when the intermediate class versions."
	
	anotherClass ~~ self classHistory first ifTrue: [  ^super instVarMappingTo: anotherClass ].
	"slot 5 is currently description and has been renamed to information"
	(((self allInstVarNames at: 5) = #''information'') and: [
		(anotherClass allInstVarNames at: 5) = #''description''])
			ifFalse: [ self error: ''incorrect migration instance variable mapping''].
	^#( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)'.
	"migration"
	instanceCount := 0.
	array := Array new: 1.
	1 to: instanceList size do: [ :index | | instances | 
		instances := instanceList at: index.
		Transcript cr; show: (classesWithClassHistory at: index) name asString, '...'.
		instances
			do: [ :instance | 
				array at: 1 put: instance.
				instance class migrateInstances: array to: instance class classHistory last ].
		instanceCount := instanceCount + instances size.
		Transcript show: instances size printString, ' instances migrated.' ].
	Transcript cr; show: instanceCount printString, ' instances migrated.'.
	System commitTransaction ifFalse: [ nil error: 'commit failed' ].
	]
			ensure: [ 
				(symbolList objectNamed: #UserGlobals) 
					removeKey: #'SS3_MIGRATE_INSTANCE_LISTS' 
					ifAbsent: [  ] ].
"clean up phase"
SSMember class removeSelector: #instVarMappingTo:.
SSProject class removeSelector: #instVarMappingTo:.
}}}